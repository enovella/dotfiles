/*

  Hex-Rays Decompiler configuration file.

  The syntax of this file is very simple.
  Feel free to edit it to your taste.

  IMPORTANT: the installer overwrites this file. Please make a backup copy
  if you modify this file in any way. Otherwise you may lose your
  modifications!

*/

// Background colors (rgb values: 0xBBGGRR)
#define DEFCOLOR 0xFFFFFFFF // default background color

LOCTYPE_BGCOLOR         = DEFCOLOR  // local type defs (not used yet)
VARDECL_BGCOLOR         = DEFCOLOR  // local variable declarations
FUNCBODY_BGCOLOR        = DEFCOLOR  // function body

MARK_BGCOLOR            = 0xEEFFF0  // marked function color (in ida)

// Indentations

BLOCK_INDENT            = 2         // 2 spaces for each curly brace
COMMENT_INDENT          = 48
RIGHT_MARGIN            = 120       // as soon as the line length approaches
                                    // the right margin, the decompiler
                                    // will try to split it

// Limitations

MAX_NCOMMAS             = 8         // Allow 8 comma operators in an expression
                                    // If more, add a goto and get rid of commas

MAX_STRLIT_LENGTH       = 4096      // Constant string literals longer than this
                                    // value will not be printed in the
                                    // decompiler output but replaced by
                                    // a reference (string name)

// Default constant radix
DEFAULT_RADIX           = 0         // 0 means "decimal for signed, hex for unsigned"
                                    // Use 10 for decimal and 16 for hexadecimal

MAX_FUNCSIZE            = 1024      // Functions over 1024K are not decompiled

// Analysis and display options

#define HO_JUMPOUT_HELPERS     0x00001 // If enabled, the decompiler will
                                       // generate JUMPOUT() function instead of
                                       // failing the decompilation because of
                                       // out-of-function control flow
#define HO_DISPLAY_CASTS       0x00002 // Print casts in the output text.
                                       // For example: (int*)x
#define HO_HIDE_UNORDERED      0x00004 // Hide unordered fpval comparisons
#define HO_SSE_INTRINSICS      0x00008 // Generate SSE intrinsic functions
#define HO_IGNORE_OVERLAPS     0x00010 // If enabled, overlapping lvars will
                                       // lead to a warning instead of
                                       // failing the decompilation.
#define HO_FAST_STRUCTURAL     0x00020 // If enabled, fast structural analysis
                                       // will be used. It generates less number
                                       // of nested if-statements but may occasionally
                                       // produce some unnecessary gotos.
                                       // It is much faster on huge functions.
#define HO_CONST_STRINGS       0x00040 // Only print string literals if they reside
                                       // in read-only memory (e.g. .rodata segment).
                                       // When off, all strings are printed as literals.
                                       // You can override decompiler's decision by
                                       // adding 'const' or 'volatile' to the
                                       // string variable's type declaration
#define HO_SCMP_TO_BITOPS      0x00080 // Convert signed comparisons of unsigned
                                       // variables with zero into bit checks.
                                       // Before: (signed int)x < 0
                                       // After: (x & 0x80000000) != 0
#define HO_UNMERGE_TAILS       0x00100 // Reverse effects of branch tail optimizations:
                                       // reduce number of gotos by duplicating code
#define HO_KEEP_CURLIES        0x00200 // Keep curly braces for single-statement blocks
#define HO_DEL_ADDR_CMPS       0x00400 // Optimize away address comparisons
                                       // Example: &a < &b will be replaced by
                                       // 0 or 1. This optimization works only
                                       // for non-relocatable files.
#define HO_SHOW_CSTR_CASTS     0x00800 // Print casts from string literals
                                       // to pointers to char/uchar
                                       // For example: (unsigned __int8 *)"Hello"
#define HO_ESC_CLOSES_VIEW     0x01000 // Pressing 'Esc' closes the view
#define HO_SPOIL_FLAGREGS      0x02000 // Assume all functions spoil flag
                                       // registers ZF,CF,SF,OF,PF (including
                                       // functions with explicitely specified
                                       // spoiled lists)
#define HO_KEEP_INDIRECT_READS 0x04000 // keep all indirect memory reads (even
                                       // with unused results) so as not to lose
                                       // possible invalid address access
#define HO_KEEP_EH_CODE        0x08000 // keep exception related code
                                       // (e.g. calls to _Unwind_SjLj_Register)
#define HO_SHOW_PAC_INSNS      0x10000 // Translate ARMv8.3 Pointer Authentication
                                       // instructions into intrinsic function calls
                                       // (otherwise ignore all PAC instructions)

HEXOPTIONS               = 0x31FF      // Combination of HO_... bits

// Warning messages

#define WARN_VARARG_REGS    0 // can not handle register arguments in vararg function, discarded them
#define WARN_ILL_PURGED     1 // odd caller purged bytes %d, correcting
#define WARN_ILL_FUNCTYPE   2 // invalid function type has been ignored
#define WARN_VARARG_TCAL    3 // can not handle tail call to vararg
#define WARN_VARARG_NOSTK   4 // call vararg without local stack
#define WARN_VARARG_MANY    5 // too many varargs, some ignored
#define WARN_ADDR_OUTARGS   6 // can not handle address arithmetics in outgoing argument area of stack frame
#define WARN_DEP_UNK_CALLS  7 // found interdependent unknown calls
#define WARN_ILL_ELLIPSIS   8 // erroneously detected ellipsis type has been ignored
#define WARN_GUESSED_TYPE   9 // using guessed type %s;
#define WARN_EXP_LINVAR    10 // failed to expand a linear variable
#define WARN_WIDEN_CHAINS  11 // failed to widen chains
#define WARN_BAD_PURGED    12 // inconsistent function type and number of purged bytes
#define WARN_CBUILD_LOOPS  13 // too many cbuild loops
#define WARN_NO_SAVE_REST  14 // could not find valid save-restore pair for %s
#define WARN_ODD_INPUT_REG 15 // odd input register %s
#define WARN_ODD_ADDR_USE  16 // odd use of a variable address
#define WARN_MUST_RET_FP   17 // function return type is incorrect (must be floating point)
#define WARN_ILL_FPU_STACK 18 // inconsistent fpu stack
#define WARN_SELFREF_PROP  19 // self-referencing variable has been detected
#define WARN_WOULD_OVERLAP 20 // variables would overlap: %s
#define WARN_ARRAY_INARG   21 // array has been used for an input argument
#define WARN_MAX_ARGS      22 // too many input arguments, some ignored
#define WARN_BAD_FIELD_TYPE 23// incorrect structure member type for %s::%s, ignored
#define WARN_WRITE_CONST   24 // write access to const memory at %a has been detected
#define WARN_BAD_RETVAR    25 // wrong return variable
#define WARN_FRAG_LVAR     26 // fragmented variable at %s may be wrong
#define WARN_HUGE_STKOFF   27 // exceedingly huge offset into the stack frame
#define WARN_UNINITED_REG  28 // reference to an uninitialized register has been removed: %s
#define WARN_FIXED_MACRO   29 // fixed broken macro-insn
#define WARN_WRONG_VA_OFF  30 // wrong offset of va_list variable
#define WARN_CR_NOFIELD    31 // CONTAINING_RECORD: no field '%s' in struct '%s' at %d
#define WARN_CR_BADOFF     32 // CONTAINING_RECORD: too small offset %d for struct '%s'
#define WARN_BAD_STROFF    33 // user specified stroff has not been processed: %s
#define WARN_BAD_VARSIZE   34 // inconsistent variable size for '%s'
#define WARN_UNSUPP_REG    35 // unsupported processor register '%s'
#define WARN_UNALIGNED_ARG 36 // unaligned function argument '%s'
#define WARN_BAD_STD_TYPE  37 // corrupted or unexisting local type '%s'
#define WARN_BAD_CALL_SP   38 // bad sp value at call
#define WARN_MISSED_SWITCH 39 // wrong markup of switch jump, skipped it
#define WARN_BAD_SP        40 // positive sp value %a has been found
#define WARN_BAD_STKPNT    41 // wrong sp change point
#define WARN_UNDEF_LVAR    42 // variable '%s' is possibly undefined (variable in orange)
#define WARN_JUMPOUT       43 // control flows out of bounds to %a
#define WARN_BAD_VALRNG    44 // values range analysis failed

// Enabled warnings
WARNINGS =
[
  WARN_VARARG_REGS,    // can not handle register arguments in vararg function, discarded them
  WARN_ILL_PURGED,     // odd caller purged bytes %d, correcting
  WARN_ILL_FUNCTYPE,   // invalid function type has been ignored
  WARN_VARARG_TCAL,    // can not handle tail call to vararg
  WARN_VARARG_NOSTK,   // call vararg without local stack
  WARN_VARARG_MANY,    // too many varargs, some ignored
  WARN_ADDR_OUTARGS,   // can not handle address arithmetics in outgoing argument area of stack frame
  WARN_DEP_UNK_CALLS,  // found interdependent unknown calls
  WARN_ILL_ELLIPSIS,   // erroneously detected ellipsis type has been ignored
  WARN_GUESSED_TYPE,   // using guessed type %s;
  WARN_EXP_LINVAR,     // failed to expand a linear variable
  WARN_WIDEN_CHAINS,   // failed to widen chains
  WARN_BAD_PURGED,     // inconsistent function type and number of purged bytes
  WARN_CBUILD_LOOPS,   // too many cbuild loops
  WARN_NO_SAVE_REST,   // could not find valid save-restore pair for %s
  WARN_ODD_INPUT_REG,  // odd input register %s
  WARN_ODD_ADDR_USE,   // odd use of a variable address
  WARN_MUST_RET_FP,    // function return type is incorrect (must be floating point)
  WARN_ILL_FPU_STACK,  // inconsistent fpu stack
  WARN_SELFREF_PROP,   // self-referencing variable has been detected
  WARN_WOULD_OVERLAP,  // variables would overlap: %s
  WARN_ARRAY_INARG,    // array has been used for an input argument
  WARN_MAX_ARGS,       // too many input arguments, some ignored
  WARN_BAD_FIELD_TYPE, // incorrect structure member type for %s::%s, ignored
  WARN_WRITE_CONST,    // write access to const memory at %a has been detected
  WARN_BAD_RETVAR,     // wrong return variable
  WARN_FRAG_LVAR,      // fragmented variable at %s may be wrong
  WARN_HUGE_STKOFF,    // exceedingly huge offset into the stack frame
  WARN_UNINITED_REG,   // reference to an uninitialized register has been removed: %s
  WARN_FIXED_MACRO,    // fixed broken macro-insn
  WARN_WRONG_VA_OFF,   // wrong offset of va_list variable
  WARN_CR_NOFIELD,     // CONTAINING_RECORD: no field '%s' in struct '%s' at %d
  WARN_CR_BADOFF,      // CONTAINING_RECORD: too small offset %d for struct '%s'
  WARN_BAD_STROFF,     // user specified stroff has not been processed: %s
  WARN_BAD_VARSIZE,    // inconsistent variable size for '%s'
  WARN_UNSUPP_REG,     // unsupported processor register '%s'
  WARN_UNALIGNED_ARG,  // unaligned function argument '%s'
  WARN_BAD_STD_TYPE,   // corrupted or unexisting local type '%s'
  WARN_BAD_CALL_SP,    // bad sp value at call
  WARN_MISSED_SWITCH,  // wrong markup of switch jump, skipped it
  WARN_BAD_SP,         // positive sp value %a has been found
  WARN_BAD_STKPNT,     // wrong sp change point
  WARN_UNDEF_LVAR,     // variable '%s' is possibly undefined (variable in orange)
  WARN_JUMPOUT,        // control flows out of bounds
  WARN_BAD_VALRNG      // values range analysis failed
]

// list of function names that are considered "strcmp-like"
// for them, the decompiler will prefer to use "func(a,b) == 0" as a condition
// underscores, j_ prefixes and _NN suffixes will be ignored when comparing function names
CMPFUNCS = "strcmp;memcmp;strncmp;stricmp;wmemcmp;wcscmp;strcasecmp;wcsncmp;strncasecmp;strnicmp";

// MSVC C++ Conftol Flow Guard functions (set empty strings to disable)
CFGUARD_CHECK = "guard_check_icall";       // to be ignored
CFGUARD_DISPATCH = "guard_dispatch_icall"; // to be replaced by 'CALL RAX'

// End of the file
